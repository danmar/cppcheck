# Syntax reference https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions
# Environment reference https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners
name: include-what-you-use

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  iwyu:

    strategy:
      matrix:
        image: ["fedora:latest"] # "opensuse/tumbleweed:latest" / "fedora:latest" / "debian:unstable" / "archlinux:latest"

    runs-on: ubuntu-22.04
    if: ${{ github.repository_owner == 'danmar' }}

    container:
      image: ${{ matrix.image }}

    env:
      QT_VERSION: 6.7.0

    steps:
      - uses: actions/checkout@v4

      - name: Install missing software on debian/ubuntu
        if: contains(matrix.image, 'debian')
        run: |
          apt-get update
          apt-get install -y cmake clang make libpcre3-dev
          apt-get install -y libgl-dev  # fixes missing dependency for Qt in CMake
          apt-get install -y iwyu

      - name: Install missing software on archlinux
        if: contains(matrix.image, 'archlinux')
        run: |
          set -x
          pacman -Sy
          pacman -S cmake make clang pcre --noconfirm
          pacman -S libglvnd --noconfirm  # fixes missing dependency for Qt in CMake
          pacman-key --init
          pacman-key --recv-key 3056513887B78AEB --keyserver keyserver.ubuntu.com
          pacman-key --lsign-key 3056513887B78AEB 
          pacman -U 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst' 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst' --noconfirm
          echo "[chaotic-aur]" >> /etc/pacman.conf
          echo "Include = /etc/pacman.d/chaotic-mirrorlist" >> /etc/pacman.conf
          pacman -Sy
          pacman -S include-what-you-use --noconfirm
          ln -s iwyu-tool /usr/sbin/iwyu_tool

      - name: Install missing software on Fedora
        if: contains(matrix.image, 'fedora')
        run: |
          dnf install -y cmake clang pcre-devel
          dnf install -y libglvnd-devel  # fixes missing dependency for Qt in CMake
          dnf install -y p7zip-plugins  # required as fallback for py7zr in Qt installation
          dnf install -y iwyu
          ln -s iwyu_tool.py /usr/bin/iwyu_tool

      - name: Install missing software on OpenSUSE
        if: contains(matrix.image, 'opensuse')
        run: |
          zypper install -y cmake clang pcre-devel
          zypper install -y include-what-you-use-tools
          # fixes error during Qt installation
          # /__w/cppcheck/Qt/6.7.0/gcc_64/bin/qmake: error while loading shared libraries: libgthread-2.0.so.0: cannot open shared object file: No such file or directory
          zypper install -y libgthread-2_0-0
          ln -s iwyu_tool.py /usr/bin/iwyu_tool

      # Fails on OpenSUSE:
      # Warning: Failed to restore: Tar failed with error: Unable to locate executable file: tar. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.
      # Also the shell is broken afterwards:
      # OCI runtime exec failed: exec failed: unable to start container process: exec: "sh": executable file not found in $PATH: unknown
      - name: Install Qt ${{ env.QT_VERSION }}
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          modules: 'qtcharts'
          install-deps: false
          cache: true

      - name: Prepare CMake
        run: |
          cmake -S . -B cmake.output -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DHAVE_RULES=On -DBUILD_TESTS=On -DBUILD_GUI=On -DUSE_QT6=On -DWITH_QCHART=On -DENABLE_CHECK_INTERNAL=On -DCMAKE_GLOBAL_AUTOGEN_TARGET=On -DCMAKE_DISABLE_PRECOMPILE_HEADERS=On -DCPPCHK_GLIBCXX_DEBUG=Off -DUSE_MATCHCOMPILER=Off -DEXTERNALS_AS_SYSTEM=On
        env:
          CC: clang
          CXX: clang++

      # Fails on Debian:
      # /__w/cppcheck/Qt/6.7.0/gcc_64/libexec/rcc: error while loading shared libraries: libglib-2.0.so.0: cannot open shared object file: No such file or directory
      - name: Prepare CMake dependencies
        run: |
          # make sure the precompiled headers exist
          #make -C cmake.output/cli cmake_pch.hxx.pch
          #make -C cmake.output/gui cmake_pch.hxx.pch
          #make -C cmake.output/lib cmake_pch.hxx.pch
          #make -C cmake.output/test cmake_pch.hxx.pch
          # make sure the auto-generated GUI sources exist
          make -C cmake.output autogen
          # make sure the auto-generated GUI dependencies exist
          make -C cmake.output gui-build-deps
          make -C cmake.output triage-build-ui-deps

      - name: iwyu_tool
        run: |
          PWD=$(pwd)
          # -isystem/usr/lib/clang/17/include
          iwyu_tool -p cmake.output -j $(nproc) -- -w -Xiwyu --max_line_length=1024 -Xiwyu --comment_style=long -Xiwyu --quoted_includes_first -Xiwyu --update_comments > iwyu.log

      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: Compilation Database
          path: ./cmake.output/compile_commands.json

      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: Logs (include-what-you-use)
          path: ./*.log

  clang-include-cleaner:

    runs-on: ubuntu-22.04
    if: ${{ github.repository_owner == 'danmar' }}

    env:
      QT_VERSION: 6.7.0

    steps:
      - uses: actions/checkout@v4

      - name: Install missing software
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake make libpcre3-dev
          sudo apt-get install -y libgl-dev  # missing dependency for using Qt in CMake

      - name: Install clang
        run: |
          sudo apt-get purge --auto-remove llvm python3-lldb-14 llvm-14
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 19
          sudo apt-get install -y clang-tools-19

      - name: Install Qt ${{ env.QT_VERSION }}
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          modules: 'qtcharts'
          install-deps: false
          cache: true

      - name: Prepare CMake
        run: |
          cmake -S . -B cmake.output -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DHAVE_RULES=On -DBUILD_TESTS=On -DBUILD_GUI=On -DUSE_QT6=On -DWITH_QCHART=On -DENABLE_CHECK_INTERNAL=On -DCMAKE_GLOBAL_AUTOGEN_TARGET=On -DCMAKE_DISABLE_PRECOMPILE_HEADERS=On -DCPPCHK_GLIBCXX_DEBUG=Off -DUSE_MATCHCOMPILER=Off -DEXTERNALS_AS_SYSTEM=On
        env:
          CC: clang-19
          CXX: clang++-19

      - name: Prepare CMake dependencies
        run: |
          # make sure the precompiled headers exist
          #make -C cmake.output/cli cmake_pch.hxx.pch
          #make -C cmake.output/gui cmake_pch.hxx.pch
          #make -C cmake.output/lib cmake_pch.hxx.pch
          #make -C cmake.output/test cmake_pch.hxx.pch
          # make sure the auto-generated GUI sources exist
          make -C cmake.output autogen
          # make sure the auto-generated GUI dependencies exist
          make -C cmake.output gui-build-deps

      - name: clang-include-cleaner
        run: |
          # TODO: run multi-threaded
          find $PWD/cli $PWD/lib $PWD/test $PWD/gui -maxdepth 1 -name "*.cpp" | xargs -t -n 1 clang-include-cleaner-19 --print=changes --extra-arg=-w -p cmake.output > clang-include-cleaner.log 2>&1

      - uses: actions/upload-artifact@v4
        with:
          name: Logs (clang-include-cleaner)
          path: ./*.log
