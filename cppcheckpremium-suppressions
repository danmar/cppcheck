
# open source warnings are handled by the selfcheck.yml
noExplicitConstructor
postfixOperator
shadowFunction
useStlAlgorithm
normalCheckLevelMaxBranches

###########################################################################################################################
# Cert C++
###########################################################################################################################

# False positives for initializations
premium-cert-exp45-c
# False positives when casting to uintptr
premium-cert-int36-c

# too picky
premium-cert-arr30-c
premium-cert-int32-c
premium-cert-str34-c

# we intentionally pass structs
premium-cert-dcl39-c-*

# we need to declare reserved identifier _CRTDBG_MAP_ALLOC
premium-cert-dcl51-cpp

# we don't want to check the return values of fclose/sprintf/etc
premium-cert-err33-c

# TODO: Is there unsafe allocations, in case of exceptions) in cppcheck
# we have global objects
premium-cert-err58-cpp

# TODO: Exception objects must be nothrow copy constructible.
premium-cert-err60-cpp

# TODO should we throw Token?
premium-cert-err61-cpp

# TODO: Detect errors when converting a string to a number. The library function 'atoi()' shall not be used.
premium-cert-err62-cpp

# TODO: Can we reduce some const_cast?
premium-cert-exp55-cpp


###########################################################################################################################
# Misra C++ 2023
###########################################################################################################################

# There are false positives
premium-misra-cpp-2023-6.7.2
premium-misra-cpp-2023-7.0.3
premium-misra-cpp-2023-8.2.5
premium-misra-cpp-2023-8.18.2
premium-misra-cpp-2023-21.6.2

# TODO check if these should be suppressed or not
premium-misra-cpp-2023-0.2.1
premium-misra-cpp-2023-0.2.2
premium-misra-cpp-2023-10.0.1
premium-misra-cpp-2023-10.2.1
premium-misra-cpp-2023-10.2.2
premium-misra-cpp-2023-11.6.3
premium-misra-cpp-2023-13.1.2
premium-misra-cpp-2023-13.3.1
premium-misra-cpp-2023-13.3.2
premium-misra-cpp-2023-13.3.3
premium-misra-cpp-2023-15.0.2
premium-misra-cpp-2023-15.1.2
premium-misra-cpp-2023-15.1.3
premium-misra-cpp-2023-18.1.1
premium-misra-cpp-2023-18.3.2
premium-misra-cpp-2023-18.4.1
premium-misra-cpp-2023-19.0.3
premium-misra-cpp-2023-19.1.3
premium-misra-cpp-2023-19.3.1
premium-misra-cpp-2023-19.6.1
premium-misra-cpp-2023-21.2.1
premium-misra-cpp-2023-21.2.2
premium-misra-cpp-2023-21.2.3
premium-misra-cpp-2023-23.11.1
premium-misra-cpp-2023-26.3.1
premium-misra-cpp-2023-28.6.1
premium-misra-cpp-2023-30.0.1
premium-misra-cpp-2023-5.13.2
premium-misra-cpp-2023-5.13.4
premium-misra-cpp-2023-6.0.3
premium-misra-cpp-2023-6.2.4
premium-misra-cpp-2023-6.4.2
premium-misra-cpp-2023-6.5.1
premium-misra-cpp-2023-6.8.3
premium-misra-cpp-2023-6.9.2
premium-misra-cpp-2023-7.0.1
premium-misra-cpp-2023-7.0.4
premium-misra-cpp-2023-7.0.6
premium-misra-cpp-2023-7.11.2
premium-misra-cpp-2023-7.11.3
premium-misra-cpp-2023-8.0.1
premium-misra-cpp-2023-8.1.1
premium-misra-cpp-2023-8.19.1
premium-misra-cpp-2023-8.2.11
premium-misra-cpp-2023-8.2.6
premium-misra-cpp-2023-8.2.7
premium-misra-cpp-2023-8.2.8
premium-misra-cpp-2023-9.5.1
premium-misra-cpp-2023-9.5.2
premium-misra-cpp-2023-9.6.4


# ignored function return value (emplace etc)
premium-misra-cpp-2023-0.1.2

# we comment out code by intention in some cases
premium-misra-cpp-2023-5.7.2

# TODO should we use this rule?
premium-misra-cpp-2023-5.10.1

# Internal linkage using "static" keyword
premium-misra-cpp-2023-6.5.2

# we use local static variables by intention
premium-misra-cpp-2023-6.7.1

# FIXME enforce proper ref qualifications
premium-misra-cpp-2023-6.8.4

# we convert integer to bool by intention
premium-misra-cpp-2023-7.0.2

# TODO should we use this rule?
premium-misra-cpp-2023-8.1.2

# we call functions etc by intention in && || RHS
premium-misra-cpp-2023-8.14.1

# we use c-style casts by intention
premium-misra-cpp-2023-8.2.2

# we use const_cast by intention
premium-misra-cpp-2023-8.2.3

# we use recursion by intention
premium-misra-cpp-2023-8.2.10

# we leave out {} sometimes
premium-misra-cpp-2023-9.3.1

# we leave out "else" by intention
premium-misra-cpp-2023-9.4.1

# we use arrays by intention
premium-misra-cpp-2023-11.3.1

# we dont initialize variables directly by intention
premium-misra-cpp-2023-11.6.1

# we use unions by intention
premium-misra-cpp-2023-12.3.1

# we sometimes use both public/private data members by intention
premium-misra-cpp-2023-14.1.1

# TODO should we use this rule?
premium-misra-cpp-2023-15.0.1

# TODO: should we use this rule?
premium-misra-cpp-2023-16.6.1

# TODO: should we use this rule?
premium-misra-cpp-2023-17.8.1

# Dynamic memory usage in std::string etc
premium-misra-cpp-2023-21.6.1

# we use <cctype> by intention
premium-misra-cpp-2023-24.5.1
