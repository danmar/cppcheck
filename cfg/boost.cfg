<?xml version="1.0"?>
<def format="2">
  <!-- Boost Library Configuration -->
  <!-- Documentation: https://www.boost.org/doc/libs/ -->
  <!-- ########## Boost defines / macros ########## -->
  <!-- https://www.boost.org/doc/libs/master/libs/config/doc/html/boost_config/boost_macro_reference.html -->
  <define name="BOOST_FORCEINLINE" value="inline"/>
  <define name="BOOST_NOINLINE" value=""/>
  <define name="BOOST_NORETURN" value="[[noreturn]]"/>
  <define name="BOOST_LIKELY(X)" value="(X)"/>
  <define name="BOOST_UNLIKELY(X)" value="(X)"/>
  <define name="BOOST_FIXTURE_TEST_SUITE(suite_name, fixture_name)" value=""/>
  <define name="BOOST_FIXTURE_TEST_SUITE_END()" value=""/>
  <define name="BOOST_TEST_GLOBAL_FIXTURE(name)" value=""/>
  <define name="BOOST_PYTHON_FUNCTION_OVERLOADS(foo_overloads, foo, x, y)" value=""/>
  <define name="BOOST_AUTO_TEST_SUITE(X)" value=""/>
  <define name="BOOST_AUTO_TEST_SUITE_END()" value=""/>
  <define name="BOOST_ASSERT(condition)" value="assert(condition)"/>
  <define name="BOOST_TEST(condition)" value="assert(condition)"/>
  <define name="BOOST_WARN(condition)" value="assert(condition)"/>
  <define name="BOOST_CHECK(condition)" value="assert(condition)"/>
  <define name="BOOST_REQUIRE(condition)" value="assert(condition)"/>
  <define name="BOOST_CHECK_EQUAL(a,b)" value="assert((a) == (b))"/>
  <define name="BOOST_WARN_EQUAL(a,b)" value="assert((a) == (b))"/>
  <define name="BOOST_REQUIRE_EQUAL(a,b)" value="assert((a) == (b))"/>
  <define name="BOOST_LOG_ATTRIBUTE_KEYWORD(keyword, name_, value_type_)" value="value_type_ keyword;"/>
  <!-- Tell cppcheck to interpret BOOST_AUTO_TEST_CASE as a function definition -->
  <define name="BOOST_AUTO_TEST_CASE(str)" value="void BOOST_AUTO_TEST_CASE_run(str)"/>
  <define name="BOOST_FIXTURE_TEST_CASE(str1, str2)" value="void BOOST_FIXTURE_TEST_CASE_run(str1,str2)"/>
  <define name="BOOST_PYTHON_MODULE(str)" value="void BOOST_PYTHON_MODULE_definition(str)"/>
  <!-- ########## Boost containers ########## -->
  <!-- boost containers that are similar to std containers -->
  <container id="boostArray" startPattern="boost :: array|scoped_array &lt;" inherits="stdArray"/>
  <container id="boostCircularBuffer" startPattern="boost :: circular_buffer &lt;" inherits="stdContainer"/>
  <container id="boostList" startPattern="boost :: list|slist &lt;" inherits="stdList"/>
  <container id="boostMap" startPattern="boost :: map|flat_map|flat_multimap|multimap|unordered_map|unordered_multimap &lt;" inherits="stdMap"/>
  <container id="boostSet" startPattern="boost :: set|flat_set|flat_multiset|multiset|unordered_set &lt;" inherits="stdSet"/>
  <container id="boostVectorDeque" startPattern="boost :: deque|vector|small_vector|stable_vector|static_vector &lt;" inherits="stdVectorDeque"/>
  <!-- ########## Boost functions ########## -->
  <!-- https://www.boost.org/doc/libs/1_69_0/doc/html/boost/algorithm/join.html -->
  <!-- template<typename SequenceSequenceT, typename Range1T> 
       range_value< SequenceSequenceT >::type join(const SequenceSequenceT & Input, const Range1T & Separator); -->
  <function name="boost::algorithm::join">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <arg nr="1" direction="in">
      <not-uninit/>
      <not-null/>
    </arg>
    <arg nr="2" direction="in">
      <not-uninit/>
      <not-null/>
    </arg>
  </function>
  <!-- boost::math classification functions -->
  <!-- https://www.boost.org/doc/libs/1_69_0/libs/math/doc/html/math_toolkit/fpclass.html -->
  <!-- template <class T> int fpclassify(T t); -->
  <function name="boost::math::fpclassify">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue type="int"/>
    <arg nr="1" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
  </function>
  <!-- template <class T> bool isfinite(T z); -->
  <!-- template <class T> bool isinf(T t); -->
  <!-- template <class T> bool isnan(T t); -->
  <!-- template <class T> bool isnormal(T t); -->
  <function name="boost::math::isfinite,boost::math::isinf,boost::math::isnan,boost::math::isnormal">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue type="bool"/>
    <arg nr="1" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
  </function>
  <!-- boost::math sign functions -->
  <!-- https://www.boost.org/doc/libs/1_69_0/libs/math/doc/html/math_toolkit/sign_functions.html -->
  <!-- template <class T> int sign (const T& z); -->
  <function name="boost::math::sign">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue type="int">arg1==0?0:(arg1&lt;0?-1:1)</returnValue>
    <arg nr="1" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
  </function>
  <!-- template<class T> int signbit(T x); -->
  <function name="boost::math::signbit">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue type="int">arg1&lt;0?1:0</returnValue>
    <arg nr="1">
      <not-uninit/>
      <not-bool/>
    </arg>
  </function>
  <!-- template <class T, class U> calculated-result-type copysign (const T& x, const U& y); -->
  <function name="boost::math::copysign">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <arg nr="1" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
    <arg nr="2" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
  </function>
  <!-- template <class T> inline T changesign (const T& z); -->
  <function name="boost::math::changesign">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <arg nr="1" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
  </function>
  <!-- boost::math constants -->
  <!-- https://www.boost.org/doc/libs/1_69_0/libs/math/doc/html/math_toolkit/constants.html -->
  <function name="boost::math::constants::half">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>5.000000000000000000000000000000000000e-01</returnValue>
  </function>
  <function name="boost::math::constants::third">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>3.333333333333333333333333333333333333e-01</returnValue>
  </function>
  <function name="boost::math::constants::twothirds">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>6.666666666666666666666666666666666666e-01</returnValue>
  </function>
  <function name="boost::math::constants::two_thirds">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>6.666666666666666666666666666666666666e-01</returnValue>
  </function>
  <function name="boost::math::constants::sixth">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.66666666666666666666666666666666666666666e-01</returnValue>
  </function>
  <function name="boost::math::constants::three_quarters">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>7.500000000000000000000000000000000000e-01</returnValue>
  </function>
  <function name="boost::math::constants::root_two">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.414213562373095048801688724209698078e+00</returnValue>
  </function>
  <function name="boost::math::constants::root_three">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.732050807568877293527446341505872366e+00</returnValue>
  </function>
  <function name="boost::math::constants::half_root_two">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>7.071067811865475244008443621048490392e-01</returnValue>
  </function>
  <function name="boost::math::constants::ln_two">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>6.931471805599453094172321214581765680e-01</returnValue>
  </function>
  <function name="boost::math::constants::ln_ln_two">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>-3.665129205816643270124391582326694694e-01</returnValue>
  </function>
  <function name="boost::math::constants::root_ln_four">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.177410022515474691011569326459699637e+00</returnValue>
  </function>
  <function name="boost::math::constants::one_div_root_two">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>7.071067811865475244008443621048490392e-01</returnValue>
  </function>
  <function name="boost::math::constants::pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>3.141592653589793238462643383279502884e+00</returnValue>
  </function>
  <function name="boost::math::constants::half_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.570796326794896619231321691639751442e+00</returnValue>
  </function>
  <function name="boost::math::constants::third_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.047197551196597746154214461093167628e+00</returnValue>
  </function>
  <function name="boost::math::constants::sixth_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>5.235987755982988730771072305465838140e-01</returnValue>
  </function>
  <function name="boost::math::constants::two_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>6.283185307179586476925286766559005768e+00</returnValue>
  </function>
  <function name="boost::math::constants::two_thirds_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>2.094395102393195492308428922186335256e+00</returnValue>
  </function>
  <function name="boost::math::constants::three_quarters_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>2.356194490192344928846982537459627163e+00</returnValue>
  </function>
  <function name="boost::math::constants::four_thirds_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>4.188790204786390984616857844372670512e+00</returnValue>
  </function>
  <function name="boost::math::constants::one_div_two_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.591549430918953357688837633725143620e-01</returnValue>
  </function>
  <function name="boost::math::constants::one_div_root_two_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>3.989422804014326779399460599343818684e-01</returnValue>
  </function>
  <function name="boost::math::constants::root_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.772453850905516027298167483341145182e+00</returnValue>
  </function>
  <function name="boost::math::constants::root_half_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.253314137315500251207882642405522626e+00</returnValue>
  </function>
  <function name="boost::math::constants::root_two_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>2.506628274631000502415765284811045253e+00</returnValue>
  </function>
  <function name="boost::math::constants::log_root_two_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>9.189385332046727417803297364056176398e-01</returnValue>
  </function>
  <function name="boost::math::constants::one_div_root_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>5.641895835477562869480794515607725858e-01</returnValue>
  </function>
  <function name="boost::math::constants::root_one_div_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>5.641895835477562869480794515607725858e-01</returnValue>
  </function>
  <function name="boost::math::constants::pi_minus_three">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.415926535897932384626433832795028841e-01</returnValue>
  </function>
  <function name="boost::math::constants::four_minus_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>8.584073464102067615373566167204971158e-01</returnValue>
  </function>
  <function name="boost::math::constants::pow23_four_minus_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>7.953167673715975443483953350568065807e-01</returnValue>
  </function>
  <function name="boost::math::constants::pi_pow_e">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>2.245915771836104547342715220454373502e+01</returnValue>
  </function>
  <function name="boost::math::constants::pi_sqr">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>9.869604401089358618834490999876151135e+00</returnValue>
  </function>
  <function name="boost::math::constants::pi_sqr_div_six">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.644934066848226436472415166646025189e+00</returnValue>
  </function>
  <function name="boost::math::constants::pi_cubed">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>3.100627668029982017547631506710139520e+01</returnValue>
  </function>
  <function name="boost::math::constants::cbrt_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.464591887561523263020142527263790391e+00</returnValue>
  </function>
  <function name="boost::math::constants::one_div_cbrt_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>6.827840632552956814670208331581645981e-01</returnValue>
  </function>
  <function name="boost::math::constants::e">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>2.718281828459045235360287471352662497e+00</returnValue>
  </function>
  <function name="boost::math::constants::exp_minus_half">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>6.065306597126334236037995349911804534e-01</returnValue>
  </function>
  <function name="boost::math::constants::e_pow_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>2.314069263277926900572908636794854738e+01</returnValue>
  </function>
  <function name="boost::math::constants::root_e">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.648721270700128146848650787814163571e+00</returnValue>
  </function>
  <function name="boost::math::constants::log10_e">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>4.342944819032518276511289189166050822e-01</returnValue>
  </function>
  <function name="boost::math::constants::one_div_log10_e">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>2.302585092994045684017991454684364207e+00</returnValue>
  </function>
  <function name="boost::math::constants::ln_ten">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>2.302585092994045684017991454684364207e+00</returnValue>
  </function>
  <function name="boost::math::constants::degree">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.745329251994329576923690768488612713e-02</returnValue>
  </function>
  <function name="boost::math::constants::radian">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>5.729577951308232087679815481410517033e+01</returnValue>
  </function>
  <function name="boost::math::constants::sin_one">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>8.414709848078965066525023216302989996e-01</returnValue>
  </function>
  <function name="boost::math::constants::cos_one">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>5.403023058681397174009366074429766037e-01</returnValue>
  </function>
  <function name="boost::math::constants::sinh_one">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.175201193643801456882381850595600815e+00</returnValue>
  </function>
  <function name="boost::math::constants::cosh_one">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.543080634815243778477905620757061682e+00</returnValue>
  </function>
  <function name="boost::math::constants::phi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.618033988749894848204586834365638117e+00</returnValue>
  </function>
  <function name="boost::math::constants::ln_phi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>4.812118250596034474977589134243684231e-01</returnValue>
  </function>
  <function name="boost::math::constants::one_div_ln_phi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>2.078086921235027537601322606117795767e+00</returnValue>
  </function>
  <function name="boost::math::constants::euler">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>5.772156649015328606065120900824024310e-01</returnValue>
  </function>
  <function name="boost::math::constants::one_div_euler">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.732454714600633473583025315860829681e+00</returnValue>
  </function>
  <function name="boost::math::constants::euler_sqr">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>3.331779238077186743183761363552442266e-01</returnValue>
  </function>
  <function name="boost::math::constants::zeta_two">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.644934066848226436472415166646025189e+00</returnValue>
  </function>
  <function name="boost::math::constants::zeta_three">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.202056903159594285399738161511449990e+00</returnValue>
  </function>
  <function name="boost::math::constants::catalan">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>9.159655941772190150546035149323841107e-01</returnValue>
  </function>
  <function name="boost::math::constants::glaisher">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.282427129100622636875342568869791727e+00</returnValue>
  </function>
  <function name="boost::math::constants::khinchin">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>2.685452001065306445309714835481795693e+00</returnValue>
  </function>
  <function name="boost::math::constants::extreme_value_skewness">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>1.139547099404648657492793019389846112e+00</returnValue>
  </function>
  <function name="boost::math::constants::rayleigh_skewness">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>6.311106578189371381918993515442277798e-01</returnValue>
  </function>
  <function name="boost::math::constants::rayleigh_kurtosis">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>3.245089300687638062848660410619754415e+00</returnValue>
  </function>
  <function name="boost::math::constants::rayleigh_kurtosis_excess">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>2.450893006876380628486604106197544154e-01</returnValue>
  </function>
  <function name="boost::math::constants::two_div_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>6.366197723675813430755350534900574481e-01</returnValue>
  </function>
  <function name="boost::math::constants::root_two_div_pi">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue>7.978845608028653558798921198687637369e-01</returnValue>
  </function>
  <!-- boost::math rounding functions -->
  <!-- https://www.boost.org/doc/libs/1_69_0/libs/math/doc/html/math_toolkit/rounding/round.html -->
  <!-- template <class T> T round(const T& v); -->
  <!-- template <class T, class Policy> T round(const T& v, const Policy&); -->
  <function name="boost::math::round">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <arg nr="1" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
    <arg nr="2" default="0" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
  </function>
  <!-- template <class T> int iround(const T& v); -->
  <!-- template <class T, class Policy> int iround(const T& v, const Policy&); -->
  <function name="boost::math::iround">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue type="int"/>
    <arg nr="1" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
    <arg nr="2" default="0" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
  </function>
  <!-- template <class T> long lround(const T& v); -->
  <!-- template <class T, class Policy> long lround(const T& v, const Policy&); -->
  <function name="boost::math::lround">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue type="long int"/>
    <arg nr="1" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
    <arg nr="2" default="0" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
  </function>
  <!-- template <class T> long long llround(const T& v); -->
  <!-- template <class T, class Policy> long long llround(const T& v, const Policy&); -->
  <function name="boost::math::llround">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue type="long long int"/>
    <arg nr="1" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
    <arg nr="2" default="0" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
  </function>
  <!-- boost::filesystem query functions -->
  <!-- https://www.boost.org/doc/libs/1_69_0/libs/filesystem/doc/reference.html -->
  <!-- bool exists(file_status s) noexcept; -->
  <!-- bool exists(const path& p); -->
  <!-- bool exists(const path& p, system::error_code& ec) noexcept; -->
  <!-- bool is_directory(file_status s) noexcept; -->
  <!-- bool is_directory(const path& p); -->
  <!-- bool is_directory(const path& p, system::error_code& ec) noexcept; -->
  <!-- The other functions are similar ... -->
  <function name="boost::filesystem::exists,boost::filesystem::is_directory,boost::filesystem::is_empty,boost::filesystem::is_other,boost::filesystem::is_regular_file,boost::filesystem::is_symlink">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue type="bool"/>
    <arg nr="1" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
    <arg nr="2" default="0" direction="out">
      <not-bool/>
    </arg>
  </function>
  <!-- bool equivalent(const path& p1, const path& p2); -->
  <!-- bool equivalent(const path& p1, const path& p2, system::error_code& ec); -->
  <function name="boost::filesystem::equivalent">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <returnValue type="bool"/>
    <arg nr="1" direction="in">
      <not-uninit/>
    </arg>
    <arg nr="2" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
    <arg nr="3" default="0" direction="out">
      <not-bool/>
    </arg>
  </function>
  <!-- boost::filesystem actions -->
  <!-- bool remove(const path& p); -->
  <!-- bool remove(const path& p, system::error_code& ec); -->
  <function name="boost::filesystem::remove">
    <noreturn>false</noreturn>
    <pure/>
    <leak-ignore/>
    <returnValue type="bool"/>
    <arg nr="1" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
    <arg nr="2" default="0" direction="out">
      <not-bool/>
    </arg>
  </function>
  <!-- uintmax_t remove_all(const path& p); -->
  <!-- uintmax_t remove_all(const path& p, system::error_code& ec); -->
  <function name="boost::filesystem::remove_all">
    <noreturn>false</noreturn>
    <pure/>
    <leak-ignore/>
    <returnValue type="uintmax_t"/>
    <arg nr="1" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
    <arg nr="2" default="0" direction="out">
      <not-bool/>
    </arg>
  </function>
  <!-- void copy(const path& from, const path& to); -->
  <!-- void copy(const path& from, const path& to, system::error_code& ec); -->
  <!-- void copy_directory(const path& from, const path& to); -->
  <!-- void copy_directory(const path& from, const path& to, system::error_code& ec); -->
  <!-- void copy_symlink(const path& existing_symlink, const path& new_symlink); -->
  <!-- void copy_symlink(const path& existing_symlink, const path& new_symlink, system::error_code& ec); -->
  <function name="boost::filesystem::copy,boost::filesystem::copy_directory,boost::filesystem::copy_symlinks">
    <noreturn>false</noreturn>
    <pure/>
    <leak-ignore/>
    <returnValue type="void"/>
    <arg nr="1" direction="in">
      <not-uninit/>
    </arg>
    <arg nr="2" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
    <arg nr="3" default="0" direction="out">
      <not-bool/>
    </arg>
  </function>
  <!-- void copy_file(const path& from, const path& to); -->
  <!-- void copy_file(const path& from, const path& to, system::error_code& ec); -->
  <!-- void copy_file(const path& from, const path& to, copy_option option); -->
  <!-- void copy_file(const path& from, const path& to, copy_option option, system::error_code& ec); -->
  <function name="boost::filesystem::copy_file">
    <noreturn>false</noreturn>
    <pure/>
    <leak-ignore/>
    <returnValue type="void"/>
    <arg nr="1" direction="in">
      <not-uninit/>
    </arg>
    <arg nr="2" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
    <arg nr="3" default="0">
      <not-bool/>
    </arg>
    <arg nr="4" default="0" direction="out">
      <not-bool/>
    </arg>
  </function>
  <!-- bool create_directories(const path& p); -->
  <!-- bool create_directories(const path& p, system::error_code& ec); -->
  <!-- bool create_directory(const path& p); -->
  <!-- bool create_directory(const path& p, system::error_code& ec); -->
  <function name="boost::filesystem::create_directories,boost::filesystem::create_directory">
    <noreturn>false</noreturn>
    <returnValue type="bool"/>
    <pure/>
    <leak-ignore/>
    <arg nr="1" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
    <arg nr="2" default="0" direction="out">
      <not-bool/>
    </arg>
  </function>
  <!-- void create_directory_symlink(const path& to, const path& new_symlink); -->
  <!-- void create_directory_symlink(const path& to, const path& new_symlink, system::error_code& ec); -->
  <!-- void create_hard_link(const path& to, const path& new_hard_link); -->
  <!-- void create_hard_link(const path& to, const path& new_hard_link, system::error_code& ec); -->
  <!-- void create_symlink(const path& to, const path& new_symlink); -->
  <!-- void create_symlink(const path& to, const path& new_symlink, system::error_code& ec); -->
  <!-- void rename(const path& old_p, const path& new_p); -->
  <!-- void rename(const path& old_p, const path& new_p, system::error_code& ec); -->
  <function name="boost::filesystem::create_directory_symlink,boost::filesystem::create_hard_link,boost::filesystem::create_symlink,boost::filesystem::rename">
    <noreturn>false</noreturn>
    <pure/>
    <leak-ignore/>
    <returnValue type="void"/>
    <arg nr="1" direction="in">
      <not-uninit/>
    </arg>
    <arg nr="2" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
    <arg nr="3" default="0" direction="out">
      <not-bool/>
    </arg>
  </function>
  <!-- endian conversion functions -->
  <!-- https://www.boost.org/doc/libs/1_69_0/libs/endian/doc/conversion.html -->
  <!-- int8_t   endian_reverse(int8_t x) noexcept; -->
  <!-- int16_t  endian_reverse(int16_t x) noexcept; -->
  <!-- int32_t  endian_reverse(int32_t x) noexcept; -->
  <!-- int64_t  endian_reverse(int64_t x) noexcept; -->
  <!-- uint8_t  endian_reverse(uint8_t x) noexcept; -->
  <!-- uint16_t endian_reverse(uint16_t x) noexcept; -->
  <!-- uint32_t endian_reverse(uint32_t x) noexcept; -->
  <!-- uint64_t endian_reverse(uint64_t x) noexcept; -->
  <!-- template <class EndianReversible> EndianReversible big_to_native(EndianReversible x) noexcept; -->
  <!-- template <class EndianReversible> EndianReversible native_to_big(EndianReversible x) noexcept; -->
  <!-- template <class EndianReversible> EndianReversible little_to_native(EndianReversible x) noexcept; -->
  <!-- template <class EndianReversible> EndianReversible native_to_little(EndianReversible x) noexcept; -->
  <!-- template <order O1, order O2, class EndianReversible> EndianReversible conditional_reverse(EndianReversible x) noexcept; -->
  <!-- template <class EndianReversible> EndianReversible conditional_reverse(EndianReversible x, order order1, order order2) noexcept;  -->
  <function name="boost::endian::endian_reverse,boost::endian::big_to_native,boost::endian::native_to_big,boost::endian::little_to_native,boost::endian::native_to_little,boost::endian::conditional_reverse">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <arg nr="1" direction="in">
      <not-uninit/>
      <not-null/>
    </arg>
    <arg nr="2" default="0" direction="in">
      <not-bool/>
    </arg>
    <arg nr="3" default="0" direction="in">
      <not-bool/>
    </arg>
  </function>
  <!-- template <class EndianReversible> void endian_reverse_inplace(EndianReversible& x) noexcept; -->
  <!-- template <class EndianReversibleInplace> void big_to_native_inplace(EndianReversibleInplace& x) noexcept; -->
  <!-- template <class EndianReversibleInplace> void native_to_big_inplace(EndianReversibleInplace& x) noexcept; -->
  <!-- template <class EndianReversibleInplace> void little_to_native_inplace(EndianReversibleInplace& x) noexcept; -->
  <!-- template <class EndianReversibleInplace> void native_to_little_inplace(EndianReversibleInplace& x) noexcept; -->
  <!-- template <order O1, order O2, class EndianReversibleInplace> void conditional_reverse_inplace(EndianReversibleInplace& x) noexcept; -->
  <!-- template <class EndianReversibleInplace> void conditional_reverse_inplace(EndianReversibleInplace& x, order order1, order order2) noexcept; -->
  <function name="boost::endian::endian_reverse_inplace,boost::endian::big_to_native_inplace,boost::endian::native_to_big,boost::endian::little_to_native_inplace,boost::endian::native_to_little_inplace,boost::endian::conditional_reverse_inplace">
    <noreturn>false</noreturn>
    <pure/>
    <leak-ignore/>
    <arg nr="1" direction="inout">
      <not-uninit/>
      <not-null/>
    </arg>
    <arg nr="2" default="0" direction="in">
      <not-bool/>
    </arg>
    <arg nr="3" default="0" direction="in">
      <not-bool/>
    </arg>
  </function>
  <!-- boost::lexical_cast -->
  <!-- https://www.boost.org/doc/libs/1_69_0/doc/html/boost_lexical_cast.html -->
  <!-- template<typename Target, typename Source> Target lexical_cast(const Source& arg); -->
  <!-- template <typename Target> Target lexical_cast(const AnyCharacterType* chars, std::size_t count); -->
  <function name="boost::lexical_cast">
    <noreturn>false</noreturn>
    <use-retval/>
    <pure/>
    <leak-ignore/>
    <arg nr="1" direction="in">
      <not-uninit/>
      <not-null/>
    </arg>
    <arg nr="2" default="0" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
  </function>
</def>
