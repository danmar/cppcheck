<?xml version="1.0"?>
<def format="2">
  <!-- OpenCV (Open Source Computer Vision Library) Library Configuration http://opencv.org) -->
  <!-- This configuration is for the OpenCV 2.x API (The C++ API, not the older C API) -->
  <!-- The OpenCV library is typically included by '#include <opencv2/*>' or -->
  <!-- '#include "opencv2/*"'. -->
  <!-- ########## OpenCV Types ########## -->
  <!-- ########## OpenCV Macros / Defines ########## -->
  <define name="CV_PI" value="3.1415926535897932384626433832795"/>
  <define name="CV_2PI" value="6.283185307179586476925286766559"/>
  <define name="CV_LOG2" value="0.69314718055994530941723212145818"/>
  <define name="CV_MAT_CN_MASK" value="((CV_CN_MAX - 1) &lt;&lt; CV_CN_SHIFT)"/>
  <define name="CV_MAT_CN(flags)" value="((((flags) &amp; CV_MAT_CN_MASK) &gt;&gt; CV_CN_SHIFT) + 1)"/>
  <define name="CV_MAT_TYPE_MASK" value="(CV_DEPTH_MAX*CV_CN_MAX - 1)"/>
  <define name="CV_MAT_TYPE(flags)" value="((flags) &amp; CV_MAT_TYPE_MASK)"/>
  <define name="CV_MAT_CONT_FLAG_SHIFT" value="14"/>
  <define name="CV_MAT_CONT_FLAG" value="(1 &lt;&lt; CV_MAT_CONT_FLAG_SHIFT)"/>
  <define name="CV_IS_MAT_CONT(flags)" value="((flags) &amp; CV_MAT_CONT_FLAG)"/>
  <define name="CV_IS_CONT_MAT" value="CV_IS_MAT_CONT"/>
  <define name="CV_SUBMAT_FLAG_SHIFT" value="15"/>
  <define name="CV_SUBMAT_FLAG" value="(1 &lt;&lt; CV_SUBMAT_FLAG_SHIFT)"/>
  <define name="CV_IS_SUBMAT(flags)" value="((flags) &amp; CV_MAT_SUBMAT_FLAG)"/>
  <define name="MIN(a,b)" value="((a) &gt; (b) ? (b) : (a))"/>
  <define name="MAX(a,b)" value="((a) &lt; (b) ? (b) : (a))"/>
  <!-- ########## OpenCV containers ########## -->
  <!-- OpenCV containers that are similar to std containers -->
  <container id="cvString" startPattern="cv :: String" inherits="stdString"/>
  <!-- ########## OpenCV Allocation / Deallocation ########## -->
  <!-- ########## OpenCV Functions ########## -->
  <!-- Mat cv::imread ( const String & filename, int flags = IMREAD_COLOR ) -->
  <function name="cv::imread">
    <noreturn>false</noreturn>
    <returnValue type="cv::Mat"/>
    <use-retval/>
    <arg nr="1" direction="in">
      <not-uninit/>
    </arg>
    <arg nr="2" direction="in" default="cv::IMREAD_COLOR">
      <not-uninit/>
      <not-bool/>
    </arg>
  </function>
  <!-- void cv::imshow ( const String & winname, InputArray mat ) -->
  <!-- void cv::imshow ( const String & winname, const ogl::Texture2D & tex ) -->
  <function name="cv::imshow">
    <noreturn>false</noreturn>
    <returnValue type="void"/>
    <arg nr="1" direction="in">
      <not-uninit/>
    </arg>
    <arg nr="2" direction="in">
      <not-uninit/>
      <not-bool/>
    </arg>
  </function>
  <!-- void cv::namedWindow ( const String & winname, int flags = WINDOW_AUTOSIZE ) -->
  <function name="cv::namedWindow">
    <noreturn>false</noreturn>
    <returnValue type="void"/>
    <arg nr="1" direction="in">
      <not-uninit/>
    </arg>
    <arg nr="2" direction="in" default="cv::WINDOW_AUTOSIZE">
      <not-uninit/>
      <not-bool/>
    </arg>
  </function>
  <!-- int cv::waitKey ( int delay = 0 ) -->
  <function name="cv::waitKey">
    <noreturn>false</noreturn>
    <returnValue type="int"/>
    <arg nr="1" direction="in" default="0">
      <not-uninit/>
      <not-bool/>
    </arg>
  </function>
</def>
