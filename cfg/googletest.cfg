<?xml version="1.0"?>
<def format="2">
  <!-- see https://github.com/google/googletest/blob/master/googletest/docs/primer.md -->
  <define name="ASSERT_TRUE(cond)" value="(void)(cond)"/>
  <define name="EXPECT_TRUE(cond)" value="(void)(cond)"/>
  <define name="ASSERT_FALSE(cond)" value="(void)(cond)"/>
  <define name="EXPECT_FALSE(cond)" value="(void)(cond)"/>
  <define name="ASSERT_EQ(val1,val2)" value="(void)((val1)==(val2))"/>
  <define name="EXPECT_EQ(val1,val2)" value="(void)((val1)==(val2))"/>
  <define name="ASSERT_NE(val1,val2)" value="(void)((val1)!=(val2))"/>
  <define name="EXPECT_NE(val1,val2)" value="(void)((val1)!=(val2))"/>
  <define name="ASSERT_LT(val1,val2)" value="(void)((val1)&lt;(val2))"/>
  <define name="EXPECT_LT(val1,val2)" value="(void)((val1)&lt;(val2))"/>
  <define name="ASSERT_LE(val1,val2)" value="(void)((val1)&lt;=(val2))"/>
  <define name="EXPECT_LE(val1,val2)" value="(void)((val1)&lt;=(val2))"/>
  <define name="ASSERT_GT(val1,val2)" value="(void)((val1)&gt;(val2))"/>
  <define name="EXPECT_GT(val1,val2)" value="(void)((val1)&gt;(val2))"/>
  <define name="ASSERT_GE(val1,val2)" value="(void)((val1)&gt;=(val2))"/>
  <define name="EXPECT_GE(val1,val2)" value="(void)((val1)&gt;=(val2))"/>
  <define name="ASSERT_STREQ(str1,str2)" value="(void)(*(str1)==*(str2))"/>
  <define name="EXPECT_STREQ(str1,str2)" value="(void)(*(str1)==*(str2))"/>
  <define name="ASSERT_STRNE(str1,str2)" value="(void)(*(str1)!=*(str2))"/>
  <define name="EXPECT_STRNE(str1,str2)" value="(void)(*(str1)!=*(str2))"/>
  <define name="ASSERT_STRCASEEQ(str1,str2)" value="(void)(*(str1)==*(str2))"/>
  <define name="EXPECT_STRCASEEQ(str1,str2)" value="(void)(*(str1)==*(str2))"/>
  <define name="ASSERT_STRCASENE(str1,str2)" value="(void)(*(str1)!=*(str2))"/>
  <define name="EXPECT_STRCASENE(str1,str2)" value="(void)(*(str1)!=*(str2))"/>
  <define name="TEST(A,B)" value="void __ ## A ## _ ## B ( )"/>
  <define name="TEST_F(A,B)" value="void __ ## A ## _ ## B ( )"/>
  <define name="TEST_P(A,B)" value="void __ ## A ## _ ## B ( )"/>
</def>
