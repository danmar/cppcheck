/*
 * Cppcheck - A tool for static C/C++ code analysis
 * Copyright (C) 2007-2019 Cppcheck team.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef ADDONUTILS_H
#define ADDONUTILS_H

#include "errorlogger.h"
#include "path.h"

#include <memory>
#include <string>

/**
 * @brief Class that represent Cppcheck addon -- external Python scipt that executed through Cppcheck.
 *
 * Addons can be configured through JSON files which contains path to script and additional arguments.
 */
class CPPCHECKLIB Addon {
public:
    /**
     * @param fileName Path to the file to check.
     * @param exename Addon file extension
     */
    Addon(const std::string &fileName, const std::string &exename);
    ~Addon();

    /**
     * @brief Execute addon.
     * @param dumpFile Path to .dump file generated by cppcheck
     * @return Addon output.
     */
    std::string execute(const std::string &dumpFile) const;

    /**
     * @brief Geneate ErrorMessage object from input line
     * @param line Line generated due addon execution
     * @return Pointer to ErrorMessage object if input contains error message, nullptr otherwise
     *
     * TODO: Replace with std::optional when switching to C++17.
     */
    std::unique_ptr<ErrorLogger::ErrorMessage> getErrorMessage(const std::string &line) const;

private:
    /**
     * @brief Initialization helper used to set addon configuration properely.
     * @param fileName Path to addon file. Both .py and .json addons are supported.
     * @param exename Addon file extension
     */
    void getAddonInfo(const std::string &fileName, const std::string &exename);

    /**
     * @brief Return absolute path to a addon file with respect of addons configuration.
     * @param fileName Path to the file to check.
     * @param exename Addon file extension
     * @return Absolute path to a addon file if success, empty string otherwise
     */
    std::string getFullPath(const std::string &fileName, const std::string &exename) const;

private:
    /** @brief Name of addon. */
    std::string mName;

    /** @brief Absolute path to addon script file */
    std::string mScriptFile;

    /** @brief Additional addon arguments */
    std::string mArgs;
};

#endif // ADDONUTILS_H